name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-nodejs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: nodejs/package-lock.json
    
    - name: Install dependencies
      run: |
        cd nodejs
        npm ci
    
    - name: Run tests
      run: |
        cd nodejs
        npm test
    
    - name: Run linting
      run: |
        cd nodejs
        npm run lint
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: nodejs/coverage/lcov.info
        flags: nodejs
        name: nodejs-coverage

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd python
        pip install -e .
        pip install pytest pytest-cov black flake8
    
    - name: Run tests
      run: |
        cd python
        python -m pytest --cov=validbr --cov-report=xml
    
    - name: Run linting
      run: |
        cd python
        black --check .
        flake8 .
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: python/coverage.xml
        flags: python
        name: python-coverage

  test-php:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: [7.4, 8.0, 8.1, 8.2]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl
        coverage: xdebug
    
    - name: Install dependencies
      run: |
        cd php
        composer install --prefer-dist --no-progress
    
    - name: Run tests
      run: |
        cd php
        composer test
    
    - name: Run linting
      run: |
        cd php
        composer cs-check
        composer phpstan

  test-docker:
    runs-on: ubuntu-latest
    needs: [test-nodejs, test-python, test-php]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Run Docker tests
      run: |
        cd docker
        docker-compose up --build --exit-code-from nodejs
        docker-compose up --build --exit-code-from python
        docker-compose up --build --exit-code-from php

  security:
    runs-on: ubuntu-latest
    needs: [test-nodejs, test-python, test-php]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security audit (Node.js)
      run: |
        cd nodejs
        npm audit --audit-level moderate
    
    - name: Run security audit (Python)
      run: |
        cd python
        pip install safety
        safety check
    
    - name: Run security audit (PHP)
      run: |
        cd php
        composer audit

  build:
    runs-on: ubuntu-latest
    needs: [test-nodejs, test-python, test-php, test-docker, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Node.js package
      run: |
        cd nodejs
        npm run build
    
    - name: Build Python package
      run: |
        cd python
        python setup.py sdist bdist_wheel
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: |
          nodejs/dist/
          python/dist/
          python/build/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v5
      with:
        name: packages
    
    - name: Deploy to NPM
      run: |
        cd nodejs
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
        npm publish
    
    - name: Deploy to PyPI
      run: |
        cd python
        pip install twine
        twine upload dist/* --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} 